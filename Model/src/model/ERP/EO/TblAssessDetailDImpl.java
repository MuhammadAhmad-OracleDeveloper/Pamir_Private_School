package model.ERP.EO;

import java.math.BigDecimal;

import java.sql.Timestamp;

import oracle.adf.share.ADFContext;

import oracle.jbo.Key;
import oracle.jbo.domain.Number;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Sep 07 11:19:35 PKT 2020
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TblAssessDetailDImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        Id,
        AssessDetailId,
        LookupAssessCatId,
        TotalMarks,
        Ast,
        CreatedDate,
        CreatedBy,
        UpdatedDate,
        UpdatedBy,
        TblAssessDetail;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int ID = AttributesEnum.Id.index();
    public static final int ASSESSDETAILID = AttributesEnum.AssessDetailId.index();
    public static final int LOOKUPASSESSCATID = AttributesEnum.LookupAssessCatId.index();
    public static final int TOTALMARKS = AttributesEnum.TotalMarks.index();
    public static final int AST = AttributesEnum.Ast.index();
    public static final int CREATEDDATE = AttributesEnum.CreatedDate.index();
    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int UPDATEDDATE = AttributesEnum.UpdatedDate.index();
    public static final int UPDATEDBY = AttributesEnum.UpdatedBy.index();
    public static final int TBLASSESSDETAIL = AttributesEnum.TblAssessDetail.index();

    /**
     * This is the default constructor (do not remove).
     */
    public TblAssessDetailDImpl() {
    }

    /**
     * Gets the attribute value for Id, using the alias name Id.
     * @return the value of Id
     */
    public BigDecimal getId() {
        return (BigDecimal) getAttributeInternal(ID);
    }

    /**
     * Sets <code>value</code> as the attribute value for Id.
     * @param value value to set the Id
     */
    public void setId(BigDecimal value) {
        setAttributeInternal(ID, value);
    }

    /**
     * Gets the attribute value for AssessDetailId, using the alias name AssessDetailId.
     * @return the value of AssessDetailId
     */
    public BigDecimal getAssessDetailId() {
        return (BigDecimal) getAttributeInternal(ASSESSDETAILID);
    }

    /**
     * Sets <code>value</code> as the attribute value for AssessDetailId.
     * @param value value to set the AssessDetailId
     */
    public void setAssessDetailId(BigDecimal value) {
        setAttributeInternal(ASSESSDETAILID, value);
    }

    /**
     * Gets the attribute value for LookupAssessCatId, using the alias name LookupAssessCatId.
     * @return the value of LookupAssessCatId
     */
    public BigDecimal getLookupAssessCatId() {
        return (BigDecimal) getAttributeInternal(LOOKUPASSESSCATID);
    }

    /**
     * Sets <code>value</code> as the attribute value for LookupAssessCatId.
     * @param value value to set the LookupAssessCatId
     */
    public void setLookupAssessCatId(BigDecimal value) {
        setAttributeInternal(LOOKUPASSESSCATID, value);
    }

    /**
     * Gets the attribute value for TotalMarks, using the alias name TotalMarks.
     * @return the value of TotalMarks
     */
    public BigDecimal getTotalMarks() {
        return (BigDecimal) getAttributeInternal(TOTALMARKS);
    }

    /**
     * Sets <code>value</code> as the attribute value for TotalMarks.
     * @param value value to set the TotalMarks
     */
    public void setTotalMarks(BigDecimal value) {
        setAttributeInternal(TOTALMARKS, value);
    }

    /**
     * Gets the attribute value for Ast, using the alias name Ast.
     * @return the value of Ast
     */
    public String getAst() {
        return (String) getAttributeInternal(AST);
    }

    /**
     * Sets <code>value</code> as the attribute value for Ast.
     * @param value value to set the Ast
     */
    public void setAst(String value) {
        setAttributeInternal(AST, value);
    }

    /**
     * Gets the attribute value for CreatedDate, using the alias name CreatedDate.
     * @return the value of CreatedDate
     */
    public Timestamp getCreatedDate() {
        return (Timestamp) getAttributeInternal(CREATEDDATE);
    }

    /**
     * Gets the attribute value for CreatedBy, using the alias name CreatedBy.
     * @return the value of CreatedBy
     */
    public Number getCreatedBy() {
        return (Number) getAttributeInternal(CREATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreatedBy.
     * @param value value to set the CreatedBy
     */
    public void setCreatedBy(Number value) {
        setAttributeInternal(CREATEDBY, value);
    }

    /**
     * Gets the attribute value for UpdatedDate, using the alias name UpdatedDate.
     * @return the value of UpdatedDate
     */
    public Timestamp getUpdatedDate() {
        return (Timestamp) getAttributeInternal(UPDATEDDATE);
    }

    /**
     * Gets the attribute value for UpdatedBy, using the alias name UpdatedBy.
     * @return the value of UpdatedBy
     */
    public Number getUpdatedBy() {
        return (Number) getAttributeInternal(UPDATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for UpdatedBy.
     * @param value value to set the UpdatedBy
     */
    public void setUpdatedBy(Number value) {
        setAttributeInternal(UPDATEDBY, value);
    }

    /**
     * @return the associated entity TblAssessDetailImpl.
     */
    public TblAssessDetailImpl getTblAssessDetail() {
        return (TblAssessDetailImpl) getAttributeInternal(TBLASSESSDETAIL);
    }

    /**
     * Sets <code>value</code> as the associated entity TblAssessDetailImpl.
     */
    public void setTblAssessDetail(TblAssessDetailImpl value) {
        setAttributeInternal(TBLASSESSDETAIL, value);
    }

    /**
     * @param id key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(BigDecimal id) {
        return new Key(new Object[] { id });
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("model.ERP.EO.TblAssessDetailD");
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        Number loginId = null;
                        try {
                            loginId = new Number((String) ADFContext.getCurrent().getSessionScope().get("sessUMID"));
                        } catch(Exception ex) {
                            ex.printStackTrace();
                        }
                        
                        if (operation == DML_INSERT) {
                            setCreatedBy(loginId);
                            setUpdatedBy(loginId);
                            } else if(operation == DML_UPDATE) {
                            setUpdatedBy(loginId);
                        }
        super.doDML(operation, e);
    }
}

