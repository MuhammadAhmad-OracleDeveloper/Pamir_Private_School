package model.ERP.EO;

import java.math.BigDecimal;

import java.sql.Timestamp;

import oracle.adf.share.ADFContext;

import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.domain.Number;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Apr 01 13:13:09 PKT 2020
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TblLibBooksImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        Id,
        Dated,
        Name,
        LibCategoryId,
        LibSubCategoryId,
        LibLanguageId,
        LibAuthorId,
        LibPublisherId,
        IsbnNo,
        BlockNo,
        RowNo,
        ShelfNo,
        Remarks,
        Image,
        Ast,
        CreatedDate,
        CreatedBy,
        UpdatedDate,
        UpdatedBy,
        CompanySbuId,
        GroupCompanyId,
        TblLibAuthor,
        TblLibBooksCopy,
        TblLibBooksGrade,
        TblLibCategory,
        TblLibLanguage,
        TblLibPublisher,
        TblLibSubCategory;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int ID = AttributesEnum.Id.index();
    public static final int DATED = AttributesEnum.Dated.index();
    public static final int NAME = AttributesEnum.Name.index();
    public static final int LIBCATEGORYID = AttributesEnum.LibCategoryId.index();
    public static final int LIBSUBCATEGORYID = AttributesEnum.LibSubCategoryId.index();
    public static final int LIBLANGUAGEID = AttributesEnum.LibLanguageId.index();
    public static final int LIBAUTHORID = AttributesEnum.LibAuthorId.index();
    public static final int LIBPUBLISHERID = AttributesEnum.LibPublisherId.index();
    public static final int ISBNNO = AttributesEnum.IsbnNo.index();
    public static final int BLOCKNO = AttributesEnum.BlockNo.index();
    public static final int ROWNO = AttributesEnum.RowNo.index();
    public static final int SHELFNO = AttributesEnum.ShelfNo.index();
    public static final int REMARKS = AttributesEnum.Remarks.index();
    public static final int IMAGE = AttributesEnum.Image.index();
    public static final int AST = AttributesEnum.Ast.index();
    public static final int CREATEDDATE = AttributesEnum.CreatedDate.index();
    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int UPDATEDDATE = AttributesEnum.UpdatedDate.index();
    public static final int UPDATEDBY = AttributesEnum.UpdatedBy.index();
    public static final int COMPANYSBUID = AttributesEnum.CompanySbuId.index();
    public static final int GROUPCOMPANYID = AttributesEnum.GroupCompanyId.index();
    public static final int TBLLIBAUTHOR = AttributesEnum.TblLibAuthor.index();
    public static final int TBLLIBBOOKSCOPY = AttributesEnum.TblLibBooksCopy.index();
    public static final int TBLLIBBOOKSGRADE = AttributesEnum.TblLibBooksGrade.index();
    public static final int TBLLIBCATEGORY = AttributesEnum.TblLibCategory.index();
    public static final int TBLLIBLANGUAGE = AttributesEnum.TblLibLanguage.index();
    public static final int TBLLIBPUBLISHER = AttributesEnum.TblLibPublisher.index();
    public static final int TBLLIBSUBCATEGORY = AttributesEnum.TblLibSubCategory.index();

    /**
     * This is the default constructor (do not remove).
     */
    public TblLibBooksImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("model.ERP.EO.TblLibBooks");
    }


    /**
     * Gets the attribute value for Id, using the alias name Id.
     * @return the value of Id
     */
    public BigDecimal getId() {
        return (BigDecimal) getAttributeInternal(ID);
    }

    /**
     * Sets <code>value</code> as the attribute value for Id.
     * @param value value to set the Id
     */
    public void setId(BigDecimal value) {
        setAttributeInternal(ID, value);
    }

    /**
     * Gets the attribute value for Dated, using the alias name Dated.
     * @return the value of Dated
     */
    public Timestamp getDated() {
        return (Timestamp) getAttributeInternal(DATED);
    }

    /**
     * Sets <code>value</code> as the attribute value for Dated.
     * @param value value to set the Dated
     */
    public void setDated(Timestamp value) {
        setAttributeInternal(DATED, value);
    }

    /**
     * Gets the attribute value for Name, using the alias name Name.
     * @return the value of Name
     */
    public String getName() {
        return (String) getAttributeInternal(NAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for Name.
     * @param value value to set the Name
     */
    public void setName(String value) {
        setAttributeInternal(NAME, value);
    }

    /**
     * Gets the attribute value for LibCategoryId, using the alias name LibCategoryId.
     * @return the value of LibCategoryId
     */
    public BigDecimal getLibCategoryId() {
        return (BigDecimal) getAttributeInternal(LIBCATEGORYID);
    }

    /**
     * Sets <code>value</code> as the attribute value for LibCategoryId.
     * @param value value to set the LibCategoryId
     */
    public void setLibCategoryId(BigDecimal value) {
        setAttributeInternal(LIBCATEGORYID, value);
    }

    /**
     * Gets the attribute value for LibSubCategoryId, using the alias name LibSubCategoryId.
     * @return the value of LibSubCategoryId
     */
    public BigDecimal getLibSubCategoryId() {
        return (BigDecimal) getAttributeInternal(LIBSUBCATEGORYID);
    }

    /**
     * Sets <code>value</code> as the attribute value for LibSubCategoryId.
     * @param value value to set the LibSubCategoryId
     */
    public void setLibSubCategoryId(BigDecimal value) {
        setAttributeInternal(LIBSUBCATEGORYID, value);
    }

    /**
     * Gets the attribute value for LibLanguageId, using the alias name LibLanguageId.
     * @return the value of LibLanguageId
     */
    public BigDecimal getLibLanguageId() {
        return (BigDecimal) getAttributeInternal(LIBLANGUAGEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for LibLanguageId.
     * @param value value to set the LibLanguageId
     */
    public void setLibLanguageId(BigDecimal value) {
        setAttributeInternal(LIBLANGUAGEID, value);
    }

    /**
     * Gets the attribute value for LibAuthorId, using the alias name LibAuthorId.
     * @return the value of LibAuthorId
     */
    public BigDecimal getLibAuthorId() {
        return (BigDecimal) getAttributeInternal(LIBAUTHORID);
    }

    /**
     * Sets <code>value</code> as the attribute value for LibAuthorId.
     * @param value value to set the LibAuthorId
     */
    public void setLibAuthorId(BigDecimal value) {
        setAttributeInternal(LIBAUTHORID, value);
    }

    /**
     * Gets the attribute value for LibPublisherId, using the alias name LibPublisherId.
     * @return the value of LibPublisherId
     */
    public BigDecimal getLibPublisherId() {
        return (BigDecimal) getAttributeInternal(LIBPUBLISHERID);
    }

    /**
     * Sets <code>value</code> as the attribute value for LibPublisherId.
     * @param value value to set the LibPublisherId
     */
    public void setLibPublisherId(BigDecimal value) {
        setAttributeInternal(LIBPUBLISHERID, value);
    }

    /**
     * Gets the attribute value for IsbnNo, using the alias name IsbnNo.
     * @return the value of IsbnNo
     */
    public String getIsbnNo() {
        return (String) getAttributeInternal(ISBNNO);
    }

    /**
     * Sets <code>value</code> as the attribute value for IsbnNo.
     * @param value value to set the IsbnNo
     */
    public void setIsbnNo(String value) {
        setAttributeInternal(ISBNNO, value);
    }

    /**
     * Gets the attribute value for BlockNo, using the alias name BlockNo.
     * @return the value of BlockNo
     */
    public String getBlockNo() {
        return (String) getAttributeInternal(BLOCKNO);
    }

    /**
     * Sets <code>value</code> as the attribute value for BlockNo.
     * @param value value to set the BlockNo
     */
    public void setBlockNo(String value) {
        setAttributeInternal(BLOCKNO, value);
    }

    /**
     * Gets the attribute value for RowNo, using the alias name RowNo.
     * @return the value of RowNo
     */
    public String getRowNo() {
        return (String) getAttributeInternal(ROWNO);
    }

    /**
     * Sets <code>value</code> as the attribute value for RowNo.
     * @param value value to set the RowNo
     */
    public void setRowNo(String value) {
        setAttributeInternal(ROWNO, value);
    }

    /**
     * Gets the attribute value for ShelfNo, using the alias name ShelfNo.
     * @return the value of ShelfNo
     */
    public String getShelfNo() {
        return (String) getAttributeInternal(SHELFNO);
    }

    /**
     * Sets <code>value</code> as the attribute value for ShelfNo.
     * @param value value to set the ShelfNo
     */
    public void setShelfNo(String value) {
        setAttributeInternal(SHELFNO, value);
    }

    /**
     * Gets the attribute value for Remarks, using the alias name Remarks.
     * @return the value of Remarks
     */
    public String getRemarks() {
        return (String) getAttributeInternal(REMARKS);
    }

    /**
     * Sets <code>value</code> as the attribute value for Remarks.
     * @param value value to set the Remarks
     */
    public void setRemarks(String value) {
        setAttributeInternal(REMARKS, value);
    }

    /**
     * Gets the attribute value for Image, using the alias name Image.
     * @return the value of Image
     */
    public String getImage() {
        return (String) getAttributeInternal(IMAGE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Image.
     * @param value value to set the Image
     */
    public void setImage(String value) {
        setAttributeInternal(IMAGE, value);
    }

    /**
     * Gets the attribute value for Ast, using the alias name Ast.
     * @return the value of Ast
     */
    public String getAst() {
        return (String) getAttributeInternal(AST);
    }

    /**
     * Sets <code>value</code> as the attribute value for Ast.
     * @param value value to set the Ast
     */
    public void setAst(String value) {
        setAttributeInternal(AST, value);
    }

    /**
     * Gets the attribute value for CreatedDate, using the alias name CreatedDate.
     * @return the value of CreatedDate
     */
    public Timestamp getCreatedDate() {
        return (Timestamp) getAttributeInternal(CREATEDDATE);
    }

    /**
     * Gets the attribute value for CreatedBy, using the alias name CreatedBy.
     * @return the value of CreatedBy
     */
    public Number getCreatedBy() {
        return (Number) getAttributeInternal(CREATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreatedBy.
     * @param value value to set the CreatedBy
     */
    public void setCreatedBy(Number value) {
        setAttributeInternal(CREATEDBY, value);
    }

    /**
     * Gets the attribute value for UpdatedDate, using the alias name UpdatedDate.
     * @return the value of UpdatedDate
     */
    public Timestamp getUpdatedDate() {
        return (Timestamp) getAttributeInternal(UPDATEDDATE);
    }

    /**
     * Gets the attribute value for UpdatedBy, using the alias name UpdatedBy.
     * @return the value of UpdatedBy
     */
    public Number getUpdatedBy() {
        return (Number) getAttributeInternal(UPDATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for UpdatedBy.
     * @param value value to set the UpdatedBy
     */
    public void setUpdatedBy(Number value) {
        setAttributeInternal(UPDATEDBY, value);
    }

    /**
     * Gets the attribute value for CompanySbuId, using the alias name CompanySbuId.
     * @return the value of CompanySbuId
     */
    public Number getCompanySbuId() {
        return (Number) getAttributeInternal(COMPANYSBUID);
    }

    /**
     * Sets <code>value</code> as the attribute value for CompanySbuId.
     * @param value value to set the CompanySbuId
     */
    public void setCompanySbuId(Number value) {
        setAttributeInternal(COMPANYSBUID, value);
    }

    /**
     * Gets the attribute value for GroupCompanyId, using the alias name GroupCompanyId.
     * @return the value of GroupCompanyId
     */
    public Number getGroupCompanyId() {
        return (Number) getAttributeInternal(GROUPCOMPANYID);
    }

    /**
     * Sets <code>value</code> as the attribute value for GroupCompanyId.
     * @param value value to set the GroupCompanyId
     */
    public void setGroupCompanyId(Number value) {
        setAttributeInternal(GROUPCOMPANYID, value);
    }

    /**
     * @return the associated entity TblLibAuthorImpl.
     */
    public TblLibAuthorImpl getTblLibAuthor() {
        return (TblLibAuthorImpl) getAttributeInternal(TBLLIBAUTHOR);
    }

    /**
     * Sets <code>value</code> as the associated entity TblLibAuthorImpl.
     */
    public void setTblLibAuthor(TblLibAuthorImpl value) {
        setAttributeInternal(TBLLIBAUTHOR, value);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getTblLibBooksCopy() {
        return (RowIterator) getAttributeInternal(TBLLIBBOOKSCOPY);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getTblLibBooksGrade() {
        return (RowIterator) getAttributeInternal(TBLLIBBOOKSGRADE);
    }

    /**
     * @return the associated entity oracle.jbo.server.EntityImpl.
     */
    public TblLibCategoryImpl getTblLibCategory() {
        return (TblLibCategoryImpl) getAttributeInternal(TBLLIBCATEGORY);
    }

    /**
     * Sets <code>value</code> as the associated entity oracle.jbo.server.EntityImpl.
     */
    public void setTblLibCategory(TblLibCategoryImpl value) {
        setAttributeInternal(TBLLIBCATEGORY, value);
    }

    /**
     * @return the associated entity oracle.jbo.server.EntityImpl.
     */
    public TblLibLanguageImpl getTblLibLanguage() {
        return (TblLibLanguageImpl) getAttributeInternal(TBLLIBLANGUAGE);
    }

    /**
     * Sets <code>value</code> as the associated entity oracle.jbo.server.EntityImpl.
     */
    public void setTblLibLanguage(TblLibLanguageImpl value) {
        setAttributeInternal(TBLLIBLANGUAGE, value);
    }

    /**
     * @return the associated entity oracle.jbo.server.EntityImpl.
     */
    public TblLibPublisherImpl getTblLibPublisher() {
        return (TblLibPublisherImpl) getAttributeInternal(TBLLIBPUBLISHER);
    }

    /**
     * Sets <code>value</code> as the associated entity oracle.jbo.server.EntityImpl.
     */
    public void setTblLibPublisher(TblLibPublisherImpl value) {
        setAttributeInternal(TBLLIBPUBLISHER, value);
    }

    /**
     * @return the associated entity oracle.jbo.server.EntityImpl.
     */
    public TblLibSubCategoryImpl getTblLibSubCategory() {
        return (TblLibSubCategoryImpl) getAttributeInternal(TBLLIBSUBCATEGORY);
    }

    /**
     * Sets <code>value</code> as the associated entity oracle.jbo.server.EntityImpl.
     */
    public void setTblLibSubCategory(TblLibSubCategoryImpl value) {
        setAttributeInternal(TBLLIBSUBCATEGORY, value);
    }


    /**
     * @param id key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(BigDecimal id) {
        return new Key(new Object[] { id });
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        Number userId = null;
        Number cmpnyId = null;
        Number sbuId = null;
         try {
             userId = new Number((String) ADFContext.getCurrent().getSessionScope().get("sessUMID"));
             cmpnyId = new Number((String) ADFContext.getCurrent().getSessionScope().get("sessCmpnyID"));
             sbuId = new Number((String) ADFContext.getCurrent().getSessionScope().get("sessSBUID"));
         } catch(Exception ex) {
             ex.printStackTrace();
         }
         
         if (operation == DML_INSERT) {

             setGroupCompanyId(cmpnyId);
             setCompanySbuId(sbuId);

             setCreatedBy(userId);
             setUpdatedBy(userId);
             } else if(operation == DML_UPDATE) {
             
             setGroupCompanyId(cmpnyId);
             setCompanySbuId(sbuId);
             
             setUpdatedBy(userId);
         }
        super.doDML(operation, e);
    }
}

