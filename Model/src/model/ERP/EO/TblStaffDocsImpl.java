package model.ERP.EO;

import java.math.BigDecimal;

import java.sql.Timestamp;

import oracle.adf.share.ADFContext;

import oracle.jbo.Key;
import oracle.jbo.domain.NClobDomain;
import oracle.jbo.domain.Number;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Jul 08 12:09:53 PKT 2020
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TblStaffDocsImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        Id,
        StaffId,
        LookupDocType,
        DocNo,
        DocIssDate,
        DocExpDate,
        Ast,
        CreatedDate,
        CreatedBy,
        UpdatedDate,
        UpdatedBy,
        Image,
        TblStaff;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int ID = AttributesEnum.Id.index();
    public static final int STAFFID = AttributesEnum.StaffId.index();
    public static final int LOOKUPDOCTYPE = AttributesEnum.LookupDocType.index();
    public static final int DOCNO = AttributesEnum.DocNo.index();
    public static final int DOCISSDATE = AttributesEnum.DocIssDate.index();
    public static final int DOCEXPDATE = AttributesEnum.DocExpDate.index();
    public static final int AST = AttributesEnum.Ast.index();
    public static final int CREATEDDATE = AttributesEnum.CreatedDate.index();
    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int UPDATEDDATE = AttributesEnum.UpdatedDate.index();
    public static final int UPDATEDBY = AttributesEnum.UpdatedBy.index();
    public static final int IMAGE = AttributesEnum.Image.index();
    public static final int TBLSTAFF = AttributesEnum.TblStaff.index();

    /**
     * This is the default constructor (do not remove).
     */
    public TblStaffDocsImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("model.ERP.EO.TblStaffDocs");
    }


    /**
     * Gets the attribute value for Id, using the alias name Id.
     * @return the value of Id
     */
    public BigDecimal getId() {
        return (BigDecimal) getAttributeInternal(ID);
    }

    /**
     * Sets <code>value</code> as the attribute value for Id.
     * @param value value to set the Id
     */
    public void setId(BigDecimal value) {
        setAttributeInternal(ID, value);
    }

    /**
     * Gets the attribute value for StaffId, using the alias name StaffId.
     * @return the value of StaffId
     */
    public BigDecimal getStaffId() {
        return (BigDecimal) getAttributeInternal(STAFFID);
    }

    /**
     * Sets <code>value</code> as the attribute value for StaffId.
     * @param value value to set the StaffId
     */
    public void setStaffId(BigDecimal value) {
        setAttributeInternal(STAFFID, value);
    }

    /**
     * Gets the attribute value for LookupDocType, using the alias name LookupDocType.
     * @return the value of LookupDocType
     */
    public BigDecimal getLookupDocType() {
        return (BigDecimal) getAttributeInternal(LOOKUPDOCTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for LookupDocType.
     * @param value value to set the LookupDocType
     */
    public void setLookupDocType(BigDecimal value) {
        setAttributeInternal(LOOKUPDOCTYPE, value);
    }

    /**
     * Gets the attribute value for DocNo, using the alias name DocNo.
     * @return the value of DocNo
     */
    public String getDocNo() {
        return (String) getAttributeInternal(DOCNO);
    }

    /**
     * Sets <code>value</code> as the attribute value for DocNo.
     * @param value value to set the DocNo
     */
    public void setDocNo(String value) {
        setAttributeInternal(DOCNO, value);
    }

    /**
     * Gets the attribute value for DocIssDate, using the alias name DocIssDate.
     * @return the value of DocIssDate
     */
    public Timestamp getDocIssDate() {
        return (Timestamp) getAttributeInternal(DOCISSDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for DocIssDate.
     * @param value value to set the DocIssDate
     */
    public void setDocIssDate(Timestamp value) {
        setAttributeInternal(DOCISSDATE, value);
    }

    /**
     * Gets the attribute value for DocExpDate, using the alias name DocExpDate.
     * @return the value of DocExpDate
     */
    public Timestamp getDocExpDate() {
        return (Timestamp) getAttributeInternal(DOCEXPDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for DocExpDate.
     * @param value value to set the DocExpDate
     */
    public void setDocExpDate(Timestamp value) {
        setAttributeInternal(DOCEXPDATE, value);
    }

    /**
     * Gets the attribute value for Ast, using the alias name Ast.
     * @return the value of Ast
     */
    public String getAst() {
        return (String) getAttributeInternal(AST);
    }

    /**
     * Sets <code>value</code> as the attribute value for Ast.
     * @param value value to set the Ast
     */
    public void setAst(String value) {
        setAttributeInternal(AST, value);
    }

    /**
     * Gets the attribute value for CreatedDate, using the alias name CreatedDate.
     * @return the value of CreatedDate
     */
    public Timestamp getCreatedDate() {
        return (Timestamp) getAttributeInternal(CREATEDDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreatedDate.
     * @param value value to set the CreatedDate
     */
    public void setCreatedDate(Timestamp value) {
        setAttributeInternal(CREATEDDATE, value);
    }

    /**
     * Gets the attribute value for CreatedBy, using the alias name CreatedBy.
     * @return the value of CreatedBy
     */
    public Number getCreatedBy() {
        return (Number) getAttributeInternal(CREATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreatedBy.
     * @param value value to set the CreatedBy
     */
    public void setCreatedBy(Number value) {
        setAttributeInternal(CREATEDBY, value);
    }

    /**
     * Gets the attribute value for UpdatedDate, using the alias name UpdatedDate.
     * @return the value of UpdatedDate
     */
    public Timestamp getUpdatedDate() {
        return (Timestamp) getAttributeInternal(UPDATEDDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for UpdatedDate.
     * @param value value to set the UpdatedDate
     */
    public void setUpdatedDate(Timestamp value) {
        setAttributeInternal(UPDATEDDATE, value);
    }

    /**
     * Gets the attribute value for UpdatedBy, using the alias name UpdatedBy.
     * @return the value of UpdatedBy
     */
    public Number getUpdatedBy() {
        return (Number) getAttributeInternal(UPDATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for UpdatedBy.
     * @param value value to set the UpdatedBy
     */
    public void setUpdatedBy(Number value) {
        setAttributeInternal(UPDATEDBY, value);
    }

    /**
     * Gets the attribute value for Image, using the alias name Image.
     * @return the value of Image
     */
    public String getImage() {
        return (String) getAttributeInternal(IMAGE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Image.
     * @param value value to set the Image
     */
    public void setImage(String value) {
        setAttributeInternal(IMAGE, value);
    }

    /**
     * @return the associated entity TblStaffImpl.
     */
    public TblStaffImpl getTblStaff() {
        return (TblStaffImpl) getAttributeInternal(TBLSTAFF);
    }

    /**
     * Sets <code>value</code> as the associated entity TblStaffImpl.
     */
    public void setTblStaff(TblStaffImpl value) {
        setAttributeInternal(TBLSTAFF, value);
    }


    /**
     * @param id key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(BigDecimal id) {
        return new Key(new Object[] { id });
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        Number loginId = null;
                 try {
                     loginId = new Number((String) ADFContext.getCurrent().getSessionScope().get("sessRID"));
                 } catch(Exception ex) {
                     ex.printStackTrace();
                 }
                 
                 if (operation == DML_INSERT) {
                     setCreatedBy(loginId);
                     setUpdatedBy(loginId);
                     } else if(operation == DML_UPDATE) {
                     setUpdatedBy(loginId);
                 }
        super.doDML(operation, e);
    }
}

