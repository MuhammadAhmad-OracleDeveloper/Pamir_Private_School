package model.ERP.EO;

import java.math.BigDecimal;

import java.sql.Timestamp;

import oracle.adf.share.ADFContext;

import oracle.jbo.Key;
import oracle.jbo.domain.Number;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Dec 12 11:13:33 PKT 2020
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TblCollRecDImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        Id,
        CollRecMId,
        CollTypeId,
        ChqNo,
        ChqDate,
        Bank,
        Amount,
        Ast,
        CreatedDate,
        CreatedBy,
        UpdatedDate,
        UpdatedBy,
        TblCollType,
        TblCollRecM;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int ID = AttributesEnum.Id.index();
    public static final int COLLRECMID = AttributesEnum.CollRecMId.index();
    public static final int COLLTYPEID = AttributesEnum.CollTypeId.index();
    public static final int CHQNO = AttributesEnum.ChqNo.index();
    public static final int CHQDATE = AttributesEnum.ChqDate.index();
    public static final int BANK = AttributesEnum.Bank.index();
    public static final int AMOUNT = AttributesEnum.Amount.index();
    public static final int AST = AttributesEnum.Ast.index();
    public static final int CREATEDDATE = AttributesEnum.CreatedDate.index();
    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int UPDATEDDATE = AttributesEnum.UpdatedDate.index();
    public static final int UPDATEDBY = AttributesEnum.UpdatedBy.index();
    public static final int TBLCOLLTYPE = AttributesEnum.TblCollType.index();
    public static final int TBLCOLLRECM = AttributesEnum.TblCollRecM.index();

    /**
     * This is the default constructor (do not remove).
     */
    public TblCollRecDImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("model.ERP.EO.TblCollRecD");
    }


    /**
     * Gets the attribute value for Id, using the alias name Id.
     * @return the value of Id
     */
    public BigDecimal getId() {
        return (BigDecimal) getAttributeInternal(ID);
    }

    /**
     * Sets <code>value</code> as the attribute value for Id.
     * @param value value to set the Id
     */
    public void setId(BigDecimal value) {
        setAttributeInternal(ID, value);
    }

    /**
     * Gets the attribute value for CollRecMId, using the alias name CollRecMId.
     * @return the value of CollRecMId
     */
    public BigDecimal getCollRecMId() {
        return (BigDecimal) getAttributeInternal(COLLRECMID);
    }

    /**
     * Sets <code>value</code> as the attribute value for CollRecMId.
     * @param value value to set the CollRecMId
     */
    public void setCollRecMId(BigDecimal value) {
        setAttributeInternal(COLLRECMID, value);
    }

    /**
     * Gets the attribute value for CollTypeId, using the alias name CollTypeId.
     * @return the value of CollTypeId
     */
    public BigDecimal getCollTypeId() {
        return (BigDecimal) getAttributeInternal(COLLTYPEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for CollTypeId.
     * @param value value to set the CollTypeId
     */
    public void setCollTypeId(BigDecimal value) {
        setAttributeInternal(COLLTYPEID, value);
    }

    /**
     * Gets the attribute value for ChqNo, using the alias name ChqNo.
     * @return the value of ChqNo
     */
    public String getChqNo() {
        return (String) getAttributeInternal(CHQNO);
    }

    /**
     * Sets <code>value</code> as the attribute value for ChqNo.
     * @param value value to set the ChqNo
     */
    public void setChqNo(String value) {
        setAttributeInternal(CHQNO, value);
    }

    /**
     * Gets the attribute value for ChqDate, using the alias name ChqDate.
     * @return the value of ChqDate
     */
    public Timestamp getChqDate() {
        return (Timestamp) getAttributeInternal(CHQDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for ChqDate.
     * @param value value to set the ChqDate
     */
    public void setChqDate(Timestamp value) {
        setAttributeInternal(CHQDATE, value);
    }

    /**
     * Gets the attribute value for Bank, using the alias name Bank.
     * @return the value of Bank
     */
    public String getBank() {
        return (String) getAttributeInternal(BANK);
    }

    /**
     * Sets <code>value</code> as the attribute value for Bank.
     * @param value value to set the Bank
     */
    public void setBank(String value) {
        setAttributeInternal(BANK, value);
    }

    /**
     * Gets the attribute value for Amount, using the alias name Amount.
     * @return the value of Amount
     */
    public BigDecimal getAmount() {
        return (BigDecimal) getAttributeInternal(AMOUNT);
    }

    /**
     * Sets <code>value</code> as the attribute value for Amount.
     * @param value value to set the Amount
     */
    public void setAmount(BigDecimal value) {
        setAttributeInternal(AMOUNT, value);
    }

    /**
     * Gets the attribute value for Ast, using the alias name Ast.
     * @return the value of Ast
     */
    public String getAst() {
        return (String) getAttributeInternal(AST);
    }

    /**
     * Sets <code>value</code> as the attribute value for Ast.
     * @param value value to set the Ast
     */
    public void setAst(String value) {
        setAttributeInternal(AST, value);
    }

    /**
     * Gets the attribute value for CreatedDate, using the alias name CreatedDate.
     * @return the value of CreatedDate
     */
    public Timestamp getCreatedDate() {
        return (Timestamp) getAttributeInternal(CREATEDDATE);
    }

    /**
     * Gets the attribute value for CreatedBy, using the alias name CreatedBy.
     * @return the value of CreatedBy
     */
    public Number getCreatedBy() {
        return (Number) getAttributeInternal(CREATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreatedBy.
     * @param value value to set the CreatedBy
     */
    public void setCreatedBy(Number value) {
        setAttributeInternal(CREATEDBY, value);
    }

    /**
     * Gets the attribute value for UpdatedDate, using the alias name UpdatedDate.
     * @return the value of UpdatedDate
     */
    public Timestamp getUpdatedDate() {
        return (Timestamp) getAttributeInternal(UPDATEDDATE);
    }

    /**
     * Gets the attribute value for UpdatedBy, using the alias name UpdatedBy.
     * @return the value of UpdatedBy
     */
    public Number getUpdatedBy() {
        return (Number) getAttributeInternal(UPDATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for UpdatedBy.
     * @param value value to set the UpdatedBy
     */
    public void setUpdatedBy(Number value) {
        setAttributeInternal(UPDATEDBY, value);
    }

    /**
     * @return the associated entity TblCollTypeImpl.
     */
    public EntityImpl getTblCollType() {
        return (EntityImpl) getAttributeInternal(TBLCOLLTYPE);
    }

    /**
     * Sets <code>value</code> as the associated entity TblCollTypeImpl.
     */
    public void setTblCollType(EntityImpl value) {
        setAttributeInternal(TBLCOLLTYPE, value);
    }

    /**
     * @return the associated entity TblCollRecMImpl.
     */
    public TblCollRecMImpl getTblCollRecM() {
        return (TblCollRecMImpl) getAttributeInternal(TBLCOLLRECM);
    }

    /**
     * Sets <code>value</code> as the associated entity TblCollRecMImpl.
     */
    public void setTblCollRecM(TblCollRecMImpl value) {
        setAttributeInternal(TBLCOLLRECM, value);
    }


    /**
     * @param id key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(BigDecimal id) {
        return new Key(new Object[] { id });
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        Number loginId = null;
                       try {
                           loginId = new Number((String) ADFContext.getCurrent().getSessionScope().get("sessUMID"));
                       } catch(Exception ex) {
                           ex.printStackTrace();
                       }
                       
                       if (operation == DML_INSERT) {
                           setCreatedBy(loginId);
                           setUpdatedBy(loginId);
                           } else if(operation == DML_UPDATE) {
                           setUpdatedBy(loginId);
                       }
        super.doDML(operation, e);
    }
}

